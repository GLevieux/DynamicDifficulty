nbOutliersVariation = 0
nbOutliersNiveau = 0
nbTotalOutliers = 0
if(removeOutliers == TRUE)
{
#remove outliers
outliers = data.table(id=character(0))
setkey(outliers,id)
#outliers variation
outliersVal <- boxplot.stats(DTVarModel$variation)$out
if(length(outliersVal) > 0)
outliers = merge(outliers,data.table(id=DTVarModel[variation %in% outliersVal]$idPlayer),by=c("id"),all=TRUE)
nbOutliersVariation = length(outliersVal)
#outliers niveau
outliersVal <- boxplot.stats(DTVarModel$niveau)$out
if(length(outliersVal) > 0)
outliers = merge(outliers,data.table(id=DTVarModel[niveau %in% outliersVal]$idPlayer),by=c("id"),all=TRUE)
nbOutliersNiveau = length(outliersVal)
#outliers used.model
DTNumberUsedModel = DTGame[used.Model == 0,.(idPlayer = idPlayer,N=.N), by = idPlayer]
outliersVal <- boxplot.stats(DTNumberUsedModel$N)$out
if(length(outliersVal) > 0)
outliers = merge(outliers,data.table(id=DTNumberUsedModel[N %in% outliersVal]$idPlayer),by=c("id"),all=TRUE)
nbOutliersNiveau = length(outliersVal)
nbTotalOutliers = nrow(outliers)
print(outliers$id)
DTGame = DTGame[!(idPlayer %in% unlist(outliers$id))]
DTVarModel = DTVarModel[!(idPlayer %in% unlist(outliers$id))]
}
hist(DTVarModel$niveau,main = "Histogram of player levels without outliers", breaks = 6)
boxplot(DTVarModel$niveau,main = "Boxplot of player levels without outliers")
boxplot(DTVarModel$variation,main = "Boxplot of player variation without outliers")
plot(jitter(rep(1, nrow(DTVarModel))), DTVarModel$niveau , pch=20, col=rgb(0.1, 0.2, 0.8, 0.3) , xlab="X", ylab="Y", bty="n",xlim=c(0.5,1.5) )
meanaccuracy = mean(DTGame[used.Model==1]$accuracy)
sdaccuracy = sd(DTGame[used.Model==1]$accuracy)
plot(x=DTGame$step,y=DTGame$param.Diff, pch = 20, col=rgb(0.1, 0.2, 0.8, 0.15), xlab="Game Step", ylab="Difficulty Parameter (theta)")
plot(x=DTGame$step,y=DTGame$accuracy, pch = 20, col=rgb(0.1, 0.2, 0.8, 0.15), xlab="Game Step", ylab="Accuracy (Cross-Validation)")
#plot(DTGame$variation.Model,type="l")
meanFail02 = mean(DTGame[target.Diff < 0.4 & target.Diff > 0.1 & used.Model == 1]$fail)
meanTarget02 = mean(DTGame[target.Diff < 0.4 & target.Diff > 0.1 & used.Model == 1]$target.Diff)
sdTarget02 = sd(DTGame[target.Diff < 0.4 & target.Diff > 0.1 & used.Model == 1]$target.Diff)
nTarget02 = length(DTGame[target.Diff < 0.4 & target.Diff > 0.1 & used.Model == 1]$target.Diff)
meanParam02 = mean(DTGame[target.Diff < 0.4 & target.Diff > 0.1 & used.Model == 1]$param.Diff)
meanFail05 = mean(DTGame[target.Diff > 0.4 & target.Diff < 0.6 & used.Model == 1]$fail)
meanTarget05 = mean(DTGame[target.Diff > 0.4 & target.Diff < 0.6 & used.Model == 1]$target.Diff)
sdTarget05 = sd(DTGame[target.Diff > 0.4 & target.Diff < 0.6 & used.Model == 1]$target.Diff)
nTarget05 = length(DTGame[target.Diff > 0.4 & target.Diff < 0.6 & used.Model == 1]$target.Diff)
meanParam05 = mean(DTGame[target.Diff > 0.4 & target.Diff < 0.6 & used.Model == 1]$param.Diff)
meanFail07 = mean(DTGame[target.Diff > 0.6 & used.Model == 1]$fail)
meanTarget07 = mean(DTGame[target.Diff > 0.6 & used.Model == 1]$target.Diff)
sdTarget07 = sd(DTGame[target.Diff > 0.6 & used.Model == 1]$target.Diff)
nTarget07 = length(DTGame[target.Diff > 0.6 & used.Model == 1]$target.Diff)
meanParam07 = mean(DTGame[target.Diff > 0.6 & used.Model == 1]$param.Diff)
meanStepsConverge = mean(DTGame[used.model.once == 0,.N, by = idPlayer]$N)
sdStepsConverge = sd(DTGame[used.model.once == 0,.N, by = idPlayer]$N)
meanTimeConv = mean(DTGame[used.model.once == 0,.(time=max(TimeNorm)), by = idPlayer]$time)
sdTimeConv = sd(DTGame[used.model.once == 0,.(time=max(TimeNorm)), by = idPlayer]$time)
scatter.smooth(x=DTVarModel$niveau,y=DTVarModel$variation)
cor(DTVarModel$variation, DTVarModel$niveau)
mdl = glm(DTVarModel$variation ~ DTVarModel$niveau)
summary(mdl)
plot(mdl)
#on calcule le nombre de fois que le modèle a switch back from use.model = 1 to use.model = 0
DTSwitchBack = DTGame[used.Model == 0 & used.model.once == 1,.(nbSwitchBack=mean(.N)),by=idPlayer]
nb.players.switchback = nrow(DTSwitchBack)
nb.switch.back.mean = mean(DTSwitchBack$nbSwitchBack)
nb.switch.back.sd = sd(DTSwitchBack$nbSwitchBack)
#on trace les courbes de niveau des joueurs
DTLevel <- DTGame[step==60]
DTLevel$diffAtParam0.5 = 0
for(i in 1:nrow(DTLevel)){
diffs = seq(0, 1, 0.01)
predicted = rep(0,length(diffs))
beta0 = DTLevel[i]$beta0
beta1 = DTLevel[i]$beta1
for(j in 1:length(diffs)){
x = diffs[j]
predicted[j] = 1-(1/(1+exp(-(beta0+beta1*x))))
}
DTLevel[i]$diffAtParam0.5 = 1-(1/(1+exp(-(beta0+beta1*0.5))))
DT = data.table(difficulty=diffs,
variation = DTLevel[i]$variation.Model.Total,
IDjoueur = DTLevel[i]$idPlayer,
estDiff = predicted)
if(i==1){
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3)) + xlim(0,1) + ylim(0,1)
} else {
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3))
}
}
print(p)
#on donne en gros la probabilité d'échec pour theta = 0.5
hist(DTLevel$diffAtParam0.5, xlab="Failure Probability for Difficulty Parameter at 0.5")
DTLevel <- DTGame[step==60]
meanVarTotal = mean(DTLevel$variation.Model.Total)
DTLevel = DTLevel[variation.Model.Total<meanVarTotal]
for(i in 1:nrow(DTLevel)){
diffs = seq(0, 1, 0.01)
predicted = rep(0,length(diffs))
beta0 = DTLevel[i]$beta0
beta1 = DTLevel[i]$beta1
for(j in 1:length(diffs)){
x = diffs[j]
predicted[j] = 1-(1/(1+exp(-(beta0+beta1*x))))
}
DT = data.table(difficulty=diffs,
variation = DTLevel[i]$variation.Model.Total,
IDjoueur = DTLevel[i]$idPlayer,
estDiff = predicted)
if(i==1){
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3)) + xlim(0,1) + ylim(0,1)
} else {
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3))
}
}
print(p)
DTLevel <- DTGame[step==60]
meanVarTotal = mean(DTLevel$variation.Model.Total)
DTLevel = DTLevel[variation.Model.Total>meanVarTotal]
for(i in 1:nrow(DTLevel)){
diffs = seq(0, 1, 0.01)
predicted = rep(0,length(diffs))
beta0 = DTLevel[i]$beta0
beta1 = DTLevel[i]$beta1
for(j in 1:length(diffs)){
x = diffs[j]
predicted[j] = 1-(1/(1+exp(-(beta0+beta1*x))))
}
DT = data.table(difficulty=diffs,
variation = DTLevel[i]$variation.Model.Total,
IDjoueur = DTLevel[i]$idPlayer,
estDiff = predicted)
if(i==1){
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3)) + xlim(0,1) + ylim(0,1)
} else {
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3))
}
}
print(p)
boxplot(DTNumberUsedModel$N)
DTNumb
#outliers used.model
DTNumberUsedModel = DTGame[used.Model == 0,.(idPlayer = idPlayer,N=.N), by = idPlayer]
outliersVal <- boxplot.stats(DTNumberUsedModel$N)$out
if(length(outliersVal) > 0)
outliers = merge(outliers,data.table(id=DTNumberUsedModel[N %in% outliersVal]$idPlayer),by=c("id"),all=TRUE)
outliers
load_data <- function(DTGame, name, sexe, age){
filename = paste(name, "_log.csv", sep="")
DT <- as.data.table(read.csv(filename, header = TRUE,sep=";"))
DT <- head(DT, n=60)
DT$step = as.numeric(DT$step)
DT = DT[order(step)]
DT$idPlayer = name
DT$fail = 1-DT$win
DT$sexe = sexe
DT$age = age
DT$TimeNorm = as.numeric(as.POSIXct(DT$Time)) - as.numeric(as.POSIXct(DT[1]$Time))
DT$variation.Model = 0
DT$step = as.numeric(1:nrow(DT))
DT$p.echec.explo = mean(DT[used.Model == 0]$fail)
DT$used.model.once = 0
used.model.once.local = 0
for( i in 1:nrow(DT)){
if(DT[i]$used.Model == 1)
used.model.once.local = 1
DT[i]$used.model.once = used.model.once.local
}
variationTotale = 0
for( i in 2:nrow(DT)){
beta0i = DT[i]$beta0
beta1i = DT[i]$beta1
delta = 0
nb = 0
diffVals = seq(0,1,0.05)
for(j in 1:3){
if(i > j){
beta0iprev = DT[i-j]$beta0
beta1iprev = DT[i-j]$beta1
for (x in diffVals)
delta = delta + (1/(1+exp(-(beta0i+beta1i*x))) - 1/(1+exp(-(beta0iprev+beta1iprev*x))))^2
nb = nb + 1
}
}
if(nb > 0)
delta = delta / nb
DT[i]$variation.Model = sqrt(delta/length(diffVals))
variationTotale = variationTotale + sqrt(delta/length(diffVals))
}
DT$variation.Model.Total = variationTotale / (nrow(DT)-1)
if(ncol(DTGame) != 0)
DT <- merge(DTGame,DT, all=TRUE)
return(DT)
}
DTGame <- data.table()
if(V2 == TRUE)
{
DTGame <- load_data(DTGame,"V2/guillaumeV2"    , 1,36)
DTGame <- load_data(DTGame,"V2/WilliamV2"      , 1,24)
DTGame <- load_data(DTGame,"V2/thomasV2"       , 1,32)
DTGame <- load_data(DTGame,"V2/kak@shiV2"      , 1,31)
DTGame <- load_data(DTGame,"V2/CronukV2"       , 1,24)
DTGame <- load_data(DTGame,"V2/AntoineV2"      , 1,23)
DTGame <- load_data(DTGame,"V2/Tifanie BV2"    , 0,34)
DTGame <- load_data(DTGame,"V2/simon chauvinV2", 1,32)
DTGame <- load_data(DTGame,"V2/stephanieV2"    , 0,33)
DTGame <- load_data(DTGame,"V2/RomainV2"       , 0,33)
DTGame <- load_data(DTGame,"V2/gagaV2"         , 0,33)
}else{
DTGame <- load_data(DTGame,"123456"       , 1,24)
DTGame <- load_data(DTGame,"kak@shi"      , 1,31)
DTGame <- load_data(DTGame,"Clement"      , 1,26)
DTGame <- load_data(DTGame,"Cronuk"       , 1,24)
DTGame <- load_data(DTGame,"thomas"       , 1,32)
DTGame <- load_data(DTGame,"william"      , 1,24)
DTGame <- load_data(DTGame,"guillaume"    , 1,35)
DTGame <- load_data(DTGame,"TB"           , 0,34)
DTGame <- load_data(DTGame,"helene"       , 0,36)
DTGame <- load_data(DTGame,"olivier"      , 1,49)
DTGame <- load_data(DTGame,"Lauren"       , 0,24)
DTGame <- load_data(DTGame,"Antoine"      , 1,23)
DTGame <- load_data(DTGame,"spotblue"     , 1,25)
DTGame <- load_data(DTGame,"Indromak"     , 1,29)
DTGame <- load_data(DTGame,"Roro"         , 0,21)
DTGame <- load_data(DTGame,"ak"           , 0,20)
DTGame <- load_data(DTGame,"viviane"      , 0,60)
DTGame <- load_data(DTGame,"stephanie"    , 0,33)
DTGame <- load_data(DTGame,"nicole"       , 0,32)
DTGame <- load_data(DTGame,"pierrec"      , 1,45)
DTGame <- load_data(DTGame,"pierrep"      , 1,31)
DTGame <- load_data(DTGame,"subhi"        , 1,29)
DTGame <- load_data(DTGame,"faten"        , 1,33)
DTGame <- load_data(DTGame,"sandra"       , 0,42)
DTGame <- load_data(DTGame,"simon chauvin", 1,32)
DTGame <- load_data(DTGame,"stephaner"    , 1,35)
DTGame <- load_data(DTGame,"Cedric B"     , 1,38)
DTGame <- load_data(DTGame,"Choucapitch"  , 0,24)
DTGame <- load_data(DTGame,"ALIZEE"       , 0,20)
DTGame <- load_data(DTGame,"Stan"         , 1,24)
DTGame <- load_data(DTGame,"Alexis"       , 1,23)
DTGame <- load_data(DTGame,"Florian"      , 1,22)
DTGame <- load_data(DTGame,"Romain"       , 1,32)
DTGame <- load_data(DTGame,"gaga"         , 1,33)
DTGame <- load_data(DTGame,"AntoineFac"   , 1,23)
DTGame <- load_data(DTGame,"Jerome"       , 1,25)
DTGame <- load_data(DTGame,"Vil"          , 1,25)
}
par(pin=c(2.5,2.5))
plot(DTGame$param.Diff)
plot(DTGame$target.Diff)
plot(x=DTGame$step,y=DTGame$variation.Model, pch = 20, col=rgb(0.1, 0.2, 0.8, 0.15), xlab="Game Step", ylab="Model Variation")
DTVarModel = DTGame[used.Model==1,.(p.echec.explo=mean(p.echec.explo),variation=mean(variation.Model),niveau=mean(param.Diff)), by = idPlayer]
hist(DTVarModel$variation,main = "Histogram of model variability", xlab="Model Variability")
hist(DTVarModel$niveau,main = "Histogram of player levels"
, xlab="Player Level")
#boxplot(DTVarModel$niveau,main = "Boxplot of player levels")
#boxplot(DTVarModel$variation,main = "Boxplot of player variation")
quantile(DTVarModel$niveau, c(1,3)/4)
boxplot(DTVarModel$niveau, main = "Boxplot of player levels")
stripchart(DTVarModel$niveau, vertical = TRUE,
method = "jitter", jitter=0.05, add = TRUE, pch = 20, col=rgb(0.1, 0.2, 0.8, 0.4))
boxplot(DTVarModel$variation, main = "Boxplot of player variation")
stripchart(DTVarModel$variation, vertical = TRUE,
method = "jitter", jitter=0.05, add = TRUE, pch = 20, col=rgb(0.1, 0.2, 0.8, 0.4))
boxplot(DTVarModel$p.echec.explo, main = "Difficulty during exploration")
stripchart(DTVarModel$p.echec.explo, vertical = TRUE,
method = "jitter", jitter=0.05, add = TRUE, pch = 20, col=rgb(0.1, 0.2, 0.8, 0.4))
hist(DTVarModel$p.echec.explo, xlab="Failure Probability during exploration")
DStatsPlayer = DTGame[,.(time=max(TimeNorm),sexe=mean(sexe),age=mean(age)), by = idPlayer]
nbHommes = sum(DStatsPlayer$sexe)
nbFemmes = nrow(DStatsPlayer) - nbHommes
meanAge = mean(DStatsPlayer$age)
sdAge = sd(DStatsPlayer$age)
meanTime = mean(DStatsPlayer$time)
sdTime = sd(DStatsPlayer$time)
nbPlayers = nrow(DTGame[used.Model == 0,.N, by = idPlayer])
nbOutliersVariation = 0
nbOutliersNiveau = 0
nbTotalOutliers = 0
if(removeOutliers == TRUE)
{
#remove outliers
outliers = data.table(id=character(0))
setkey(outliers,id)
#outliers variation
outliersVal <- boxplot.stats(DTVarModel$variation)$out
if(length(outliersVal) > 0)
outliers = merge(outliers,data.table(id=DTVarModel[variation %in% outliersVal]$idPlayer),by=c("id"),all=TRUE)
nbOutliersVariation = length(outliersVal)
#outliers niveau
outliersVal <- boxplot.stats(DTVarModel$niveau)$out
if(length(outliersVal) > 0)
outliers = merge(outliers,data.table(id=DTVarModel[niveau %in% outliersVal]$idPlayer),by=c("id"),all=TRUE)
nbOutliersNiveau = length(outliersVal)
#outliers used.model
#DTNumberUsedModel = DTGame[used.Model == 0,.(idPlayer = idPlayer,N=.N), by = idPlayer]
#outliersVal <- boxplot.stats(DTNumberUsedModel$N)$out
# if(length(outliersVal) > 0)
# outliers = merge(outliers,data.table(id=DTNumberUsedModel[N %in% outliersVal]$idPlayer),by=c("id"),all=TRUE)
# nbOutliersNiveau = length(outliersVal)
#outliers used.model
DTNumberUsedModel = DTGame[used.model.once == 0,.(idPlayer = idPlayer,N=.N), by = idPlayer]
outliersVal <- boxplot.stats(DTNumberUsedModel$N)$out
if(length(outliersVal) > 0)
outliers = merge(outliers,data.table(id=DTNumberUsedModel[N %in% outliersVal]$idPlayer),by=c("id"),all=TRUE)
nbOutliersNiveau = length(outliersVal)
nbTotalOutliers = nrow(outliers)
print(outliers$id)
DTGame = DTGame[!(idPlayer %in% unlist(outliers$id))]
DTVarModel = DTVarModel[!(idPlayer %in% unlist(outliers$id))]
}
hist(DTVarModel$niveau,main = "Histogram of player levels without outliers", breaks = 6)
boxplot(DTVarModel$niveau,main = "Boxplot of player levels without outliers")
boxplot(DTVarModel$variation,main = "Boxplot of player variation without outliers")
plot(jitter(rep(1, nrow(DTVarModel))), DTVarModel$niveau , pch=20, col=rgb(0.1, 0.2, 0.8, 0.3) , xlab="X", ylab="Y", bty="n",xlim=c(0.5,1.5) )
meanaccuracy = mean(DTGame[used.Model==1]$accuracy)
sdaccuracy = sd(DTGame[used.Model==1]$accuracy)
plot(x=DTGame$step,y=DTGame$param.Diff, pch = 20, col=rgb(0.1, 0.2, 0.8, 0.15), xlab="Game Step", ylab="Difficulty Parameter (theta)")
plot(x=DTGame$step,y=DTGame$accuracy, pch = 20, col=rgb(0.1, 0.2, 0.8, 0.15), xlab="Game Step", ylab="Accuracy (Cross-Validation)")
#plot(DTGame$variation.Model,type="l")
meanFail02 = mean(DTGame[target.Diff < 0.4 & target.Diff > 0.1 & used.Model == 1]$fail)
meanTarget02 = mean(DTGame[target.Diff < 0.4 & target.Diff > 0.1 & used.Model == 1]$target.Diff)
sdTarget02 = sd(DTGame[target.Diff < 0.4 & target.Diff > 0.1 & used.Model == 1]$target.Diff)
nTarget02 = length(DTGame[target.Diff < 0.4 & target.Diff > 0.1 & used.Model == 1]$target.Diff)
meanParam02 = mean(DTGame[target.Diff < 0.4 & target.Diff > 0.1 & used.Model == 1]$param.Diff)
meanFail05 = mean(DTGame[target.Diff > 0.4 & target.Diff < 0.6 & used.Model == 1]$fail)
meanTarget05 = mean(DTGame[target.Diff > 0.4 & target.Diff < 0.6 & used.Model == 1]$target.Diff)
sdTarget05 = sd(DTGame[target.Diff > 0.4 & target.Diff < 0.6 & used.Model == 1]$target.Diff)
nTarget05 = length(DTGame[target.Diff > 0.4 & target.Diff < 0.6 & used.Model == 1]$target.Diff)
meanParam05 = mean(DTGame[target.Diff > 0.4 & target.Diff < 0.6 & used.Model == 1]$param.Diff)
meanFail07 = mean(DTGame[target.Diff > 0.6 & used.Model == 1]$fail)
meanTarget07 = mean(DTGame[target.Diff > 0.6 & used.Model == 1]$target.Diff)
sdTarget07 = sd(DTGame[target.Diff > 0.6 & used.Model == 1]$target.Diff)
nTarget07 = length(DTGame[target.Diff > 0.6 & used.Model == 1]$target.Diff)
meanParam07 = mean(DTGame[target.Diff > 0.6 & used.Model == 1]$param.Diff)
meanStepsConverge = mean(DTGame[used.model.once == 0,.N, by = idPlayer]$N)
sdStepsConverge = sd(DTGame[used.model.once == 0,.N, by = idPlayer]$N)
meanTimeConv = mean(DTGame[used.model.once == 0,.(time=max(TimeNorm)), by = idPlayer]$time)
sdTimeConv = sd(DTGame[used.model.once == 0,.(time=max(TimeNorm)), by = idPlayer]$time)
scatter.smooth(x=DTVarModel$niveau,y=DTVarModel$variation)
cor(DTVarModel$variation, DTVarModel$niveau)
mdl = glm(DTVarModel$variation ~ DTVarModel$niveau)
summary(mdl)
plot(mdl)
#on calcule le nombre de fois que le modèle a switch back from use.model = 1 to use.model = 0
DTSwitchBack = DTGame[used.Model == 0 & used.model.once == 1,.(nbSwitchBack=mean(.N)),by=idPlayer]
nb.players.switchback = nrow(DTSwitchBack)
nb.switch.back.mean = mean(DTSwitchBack$nbSwitchBack)
nb.switch.back.sd = sd(DTSwitchBack$nbSwitchBack)
#on trace les courbes de niveau des joueurs
DTLevel <- DTGame[step==60]
DTLevel$diffAtParam0.5 = 0
for(i in 1:nrow(DTLevel)){
diffs = seq(0, 1, 0.01)
predicted = rep(0,length(diffs))
beta0 = DTLevel[i]$beta0
beta1 = DTLevel[i]$beta1
for(j in 1:length(diffs)){
x = diffs[j]
predicted[j] = 1-(1/(1+exp(-(beta0+beta1*x))))
}
DTLevel[i]$diffAtParam0.5 = 1-(1/(1+exp(-(beta0+beta1*0.5))))
DT = data.table(difficulty=diffs,
variation = DTLevel[i]$variation.Model.Total,
IDjoueur = DTLevel[i]$idPlayer,
estDiff = predicted)
if(i==1){
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3)) + xlim(0,1) + ylim(0,1)
} else {
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3))
}
}
print(p)
#on donne en gros la probabilité d'échec pour theta = 0.5
hist(DTLevel$diffAtParam0.5, xlab="Failure Probability for Difficulty Parameter at 0.5")
DTLevel <- DTGame[step==60]
meanVarTotal = mean(DTLevel$variation.Model.Total)
DTLevel = DTLevel[variation.Model.Total<meanVarTotal]
for(i in 1:nrow(DTLevel)){
diffs = seq(0, 1, 0.01)
predicted = rep(0,length(diffs))
beta0 = DTLevel[i]$beta0
beta1 = DTLevel[i]$beta1
for(j in 1:length(diffs)){
x = diffs[j]
predicted[j] = 1-(1/(1+exp(-(beta0+beta1*x))))
}
DT = data.table(difficulty=diffs,
variation = DTLevel[i]$variation.Model.Total,
IDjoueur = DTLevel[i]$idPlayer,
estDiff = predicted)
if(i==1){
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3)) + xlim(0,1) + ylim(0,1)
} else {
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3))
}
}
print(p)
DTLevel <- DTGame[step==60]
meanVarTotal = mean(DTLevel$variation.Model.Total)
DTLevel = DTLevel[variation.Model.Total>meanVarTotal]
for(i in 1:nrow(DTLevel)){
diffs = seq(0, 1, 0.01)
predicted = rep(0,length(diffs))
beta0 = DTLevel[i]$beta0
beta1 = DTLevel[i]$beta1
for(j in 1:length(diffs)){
x = diffs[j]
predicted[j] = 1-(1/(1+exp(-(beta0+beta1*x))))
}
DT = data.table(difficulty=diffs,
variation = DTLevel[i]$variation.Model.Total,
IDjoueur = DTLevel[i]$idPlayer,
estDiff = predicted)
if(i==1){
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3)) + xlim(0,1) + ylim(0,1)
} else {
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,colour=rgb(0.1, 0.2, 0.8, 0.3))
}
}
print(p)
---
title: "Tank Shooting Game"
output: html_document
---
#install.packages("data.table")
#install.packages("ggplot2")
require(data.table)
require(ggplot2)
require(hexbin)
library(knitr)
require(lme4)
removeOutliers  <- TRUE
load_data <- function(DTGame, name){
filename = paste(name, "_log.csv", sep="")
DT <- as.data.table(read.csv(filename, header = TRUE,sep=";"))
DT$step = as.numeric(DT$step)
DT = DT[order(step)]
DT$idPlayer = name
DT$fail = 1-DT$win
DT$differenceTheta = 0
DT$diff.last.beta = 0
paramDiff = DT$param.Diff
differenceTheta = numeric(nrow(DT))
for( i in 1:nrow(DT)){
if(i+1 <= nrow(DT))
differenceTheta[i+1] = abs(paramDiff[i+1] - paramDiff[i])
}
DT$differenceTheta = differenceTheta
b0 <- DT[nrow(DT)]$beta0
b1 <- DT[nrow(DT)]$beta1
DT$diff.last.beta <- 1 - (1/(1+exp(-(b0+b1*DT$param.Diff))))
DT$error.diff <- abs(DT$target.Diff - DT$diff.last.beta)
diff.last.beta = DT$diff.last.beta
differenceDiff = numeric(nrow(DT))
for( i in 1:nrow(DT)){
if(i+1 <= nrow(DT))
differenceDiff[i+1] = abs(diff.last.beta[i+1] - diff.last.beta[i])
}
DT$differenceDiff = differenceDiff
DT$TimeNorm = as.numeric(as.POSIXct(DT$Time)) - as.numeric(as.POSIXct(DT[1]$Time))
DT$step = as.numeric(1:nrow(DT))
variationTotale = 0
for( i in 2:nrow(DT)){
beta0i = DT[i]$beta0
beta1i = DT[i]$beta1
delta = 0
nb = 0
diffVals = seq(0,1,0.05)
for(j in 1:3){
if(i > j){
beta0iprev = DT[i-j]$beta0
beta1iprev = DT[i-j]$beta1
for (x in diffVals)
delta = delta + (1/(1+exp(-(beta0i+beta1i*x))) - 1/(1+exp(-(beta0iprev+beta1iprev*x))))^2
nb = nb + 1
}
}
if(nb > 0)
delta = delta / nb
DT[i]$variation.Model = sqrt(delta/length(diffVals))
variationTotale = variationTotale + sqrt(delta/length(diffVals))
}
DT$variation.Model.Total = variationTotale / (nrow(DT)-1)
if(ncol(DTGame) != 0)
DT <- merge(DTGame,DT, all=TRUE)
return(DT)
}
DTGame <- data.table()
DTGame <- load_data(DTGame, "thomasV2")
DT01 <- data.table()
DT02 <- data.table()
DT02 <- data.table()
DT03 <- data.table()
DT04 <- data.table()
DT05 <- data.table()
DT06 <- data.table()
DT07 <- data.table()
DT08 <- data.table()
DT09 <- data.table()
hist(DTGame[used.Model== "DDA_RANDOM"]$differenceDiff)
quant <- quantile(DTGame[used.Model== "DDA_RANDOM"]$differenceDiff, probs = seq(0,1,1/10))
DT01 <- DTGame[differenceDiff<quant[2] & differenceDiff >=0 & used.Model == "DDA_RANDOM"]
DT02 <- DTGame[differenceDiff<quant[3] & differenceDiff >=quant[2] & used.Model == "DDA_RANDOM"]
DT03 <- DTGame[differenceDiff<quant[4] & differenceDiff >=quant[3] & used.Model == "DDA_RANDOM"]
DT04 <- DTGame[differenceDiff<quant[5] & differenceDiff >=quant[4] & used.Model == "DDA_RANDOM"]
DT05 <- DTGame[differenceDiff<quant[6] & differenceDiff >=quant[5] & used.Model == "DDA_RANDOM"]
DT06 <- DTGame[differenceDiff<quant[7] & differenceDiff >=quant[6] & used.Model == "DDA_RANDOM"]
DT07 <- DTGame[differenceDiff<quant[8] & differenceDiff >=quant[7] & used.Model == "DDA_RANDOM"]
DT08 <- DTGame[differenceDiff<quant[9] & differenceDiff >=quant[8] & used.Model == "DDA_RANDOM"]
DT09 <- DTGame[differenceDiff<quant[10] & differenceDiff>=quant[9] & used.Model == "DDA_RANDOM"]
DT10 <- DTGame[differenceDiff<1 & differenceDiff>=quant[10] & used.Model == "DDA_RANDOM"]
